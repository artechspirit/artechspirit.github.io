[{"section":"Blog","slug":"/blog/redux-toolkit-setup/","title":"The Most Effective and Simple Way to Implement Redux Toolkit Query in Next.js with CRUD Operations","description":"Redux Toolkit Query (RTK Query) is an advanced data fetching and caching tool that integrates seamlessly with Redux, making it a great choice for managing server state. Combined with Next.js’s App Router and Tailwind CSS, you can create a robust, scalable, and beautifully styled application with minimal effort.","date":"September 15, 2024","image":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/blog-post-2_hu12956224015231812805.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"420\"\n          height=\"236\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/blog-post-2_hu12956224015231812805.webp';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n","imageSM":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n          \n          \n          \n          \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/blog-post-2_hu13306885116178179341.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"100\"\n          height=\"100\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/blog-post-2_hu13306885116178179341.webp';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n","searchKeyword":"","categories":"JavaScript, Frontend Development","tags":"html, css, JavaScript, Redux Toolkit Query, React Hook, Next.js","content":"When building modern web applications, efficiency and simplicity are crucial. Redux Toolkit Query (RTK Query) simplifies data fetching and caching, making it an excellent choice for managing server state. Coupled with Next.js’s App Router and Tailwind CSS, you can create a scalable, well-styled application with minimal effort.\nIn this blog post, we’ll demonstrate how to implement RTK Query in a Next.js project using the App Router, perform CRUD operations with the FakeStore API, and style the application with Tailwind CSS. This guide is designed to be practical, modular, and easy to follow, ensuring clean and maintainable code.\nBackground Next.js is a powerful React framework that supports server-side rendering, static site generation, and more. Redux Toolkit Query is part of Redux Toolkit, designed to simplify data fetching and caching. Tailwind CSS is a utility-first CSS framework that makes it easy to create responsive and customizable designs.\nThe FakeStore API provides a straightforward way to simulate interactions with a store, making it ideal for our CRUD operations.\nStep-by-Step Guide 1. Setting Up the Project First, set up a Next.js project with JavaScript and install the necessary dependencies:\nnpx create-next-app my-app cd my-app npm install @reduxjs/toolkit react-redux daisyui npm install tailwindcss@latest postcss@latest autoprefixer@latest npx tailwindcss init -p Configure Tailwind CSS by editing tailwind.config.js:\nmodule.exports = { content: [ \u0026#39;./app/**/*.{js,jsx}\u0026#39;, \u0026#39;./components/**/*.{js,jsx}\u0026#39;, \u0026#39;./pages/**/*.{js,jsx}\u0026#39;, ], theme: { extend: {}, }, plugins: [require(\u0026#39;daisyui\u0026#39;)], }; Add Tailwind CSS to styles/globals.css:\n@tailwind base; @tailwind components; @tailwind utilities; 2. Setting Up Redux Toolkit Query Create an API slice using RTK Query. This will serve as our interface to the FakeStore API.\nCreate app/store/api.js:\nimport { createApi, fetchBaseQuery } from \u0026#39;@reduxjs/toolkit/query/react\u0026#39;; export const fakeStoreApi = createApi({ reducerPath: \u0026#39;fakeStoreApi\u0026#39;, baseQuery: fetchBaseQuery({ baseUrl: \u0026#39;https://fakestoreapi.com\u0026#39; }), endpoints: (builder) =\u0026gt; ({ getProducts: builder.query({ query: () =\u0026gt; \u0026#39;/products\u0026#39;, }), getProductById: builder.query({ query: (id) =\u0026gt; `/products/${id}`, }), addProduct: builder.mutation({ query: (product) =\u0026gt; ({ url: \u0026#39;/products\u0026#39;, method: \u0026#39;POST\u0026#39;, body: product, }), }), updateProduct: builder.mutation({ query: ({ id, ...product }) =\u0026gt; ({ url: `/products/${id}`, method: \u0026#39;PUT\u0026#39;, body: product, }), }), deleteProduct: builder.mutation({ query: (id) =\u0026gt; ({ url: `/products/${id}`, method: \u0026#39;DELETE\u0026#39;, }), }), }), }); export const { useGetProductsQuery, useGetProductByIdQuery, useAddProductMutation, useUpdateProductMutation, useDeleteProductMutation, } = fakeStoreApi; 3. Setting Up Redux Store Create the Redux store and configure it in app/store/index.js:\nimport { configureStore } from \u0026#39;@reduxjs/toolkit\u0026#39;; import { fakeStoreApi } from \u0026#39;./api\u0026#39;; export const store = configureStore({ reducer: { [fakeStoreApi.reducerPath]: fakeStoreApi.reducer, }, middleware: (getDefaultMiddleware) =\u0026gt; getDefaultMiddleware().concat(fakeStoreApi.middleware), }); Provide the store in app/layout.js:\nimport { Provider } from \u0026#39;react-redux\u0026#39;; import { store } from \u0026#39;./store\u0026#39;; export default function RootLayout({ children }) { return ( \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head /\u0026gt; \u0026lt;body\u0026gt; \u0026lt;Provider store={store}\u0026gt;{children}\u0026lt;/Provider\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; ); } 4. Implementing CRUD Pages Create pages for listing, viewing, adding, and editing products.\nList Products (app/products/page.js): import { useGetProductsQuery } from \u0026#39;../store/api\u0026#39;; import Link from \u0026#39;next/link\u0026#39;; export default function ProductsPage() { const { data, error, isLoading } = useGetProductsQuery(); if (isLoading) return \u0026lt;p\u0026gt;Loading...\u0026lt;/p\u0026gt;; if (error) return \u0026lt;p\u0026gt;Error loading products\u0026lt;/p\u0026gt;; return ( \u0026lt;div className=\u0026#34;container mx-auto p-4\u0026#34;\u0026gt; \u0026lt;h1 className=\u0026#34;text-2xl font-bold mb-4\u0026#34;\u0026gt;Products\u0026lt;/h1\u0026gt; \u0026lt;div className=\u0026#34;grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\u0026#34;\u0026gt; {data?.map((product) =\u0026gt; ( \u0026lt;div key={product.id} className=\u0026#34;border p-4 rounded\u0026#34;\u0026gt; \u0026lt;h2 className=\u0026#34;text-lg font-semibold\u0026#34;\u0026gt;{product.title}\u0026lt;/h2\u0026gt; \u0026lt;p\u0026gt;${product.price}\u0026lt;/p\u0026gt; \u0026lt;Link href={`/products/${product.id}`}\u0026gt; \u0026lt;button className=\u0026#34;mt-2 bg-blue-500 text-white py-1 px-2 rounded\u0026#34;\u0026gt;View\u0026lt;/button\u0026gt; \u0026lt;/Link\u0026gt; \u0026lt;/div\u0026gt; ))} \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; ); } Product Details (app/products/[id]/page.js): import { useGetProductByIdQuery } from \u0026#39;../../store/api\u0026#39;; import { useRouter } from \u0026#39;next/router\u0026#39;; export default function ProductDetailPage({ params }) { const { id } = params; const { data, error, isLoading } = useGetProductByIdQuery(id); if (isLoading) return \u0026lt;p\u0026gt;Loading...\u0026lt;/p\u0026gt;; if (error) return \u0026lt;p\u0026gt;Error loading product\u0026lt;/p\u0026gt;; return ( \u0026lt;div className=\u0026#34;container mx-auto p-4\u0026#34;\u0026gt; \u0026lt;h1 className=\u0026#34;text-2xl font-bold\u0026#34;\u0026gt;{data?.title}\u0026lt;/h1\u0026gt; \u0026lt;p className=\u0026#34;mt-2\u0026#34;\u0026gt;{data?.description}\u0026lt;/p\u0026gt; \u0026lt;p className=\u0026#34;mt-2 text-lg font-semibold\u0026#34;\u0026gt;${data?.price}\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; ); } Add Product (app/products/add/page.js): import { useState } from \u0026#39;react\u0026#39;; import { useAddProductMutation } from \u0026#39;../../store/api\u0026#39;; export default function AddProductPage() { const [addProduct] = useAddProductMutation(); const [formData, setFormData] = useState({ title: \u0026#39;\u0026#39;, price: \u0026#39;\u0026#39;, description: \u0026#39;\u0026#39;, image: \u0026#39;\u0026#39;, category: \u0026#39;\u0026#39;, }); const handleChange = (e) =\u0026gt; { setFormData({ ...formData, [e.target.name]: e.target.value }); }; const handleSubmit = async (e) =\u0026gt; { e.preventDefault(); await addProduct(formData); }; return ( \u0026lt;form onSubmit={handleSubmit} className=\u0026#34;container mx-auto p-4\u0026#34;\u0026gt; \u0026lt;h1 className=\u0026#34;text-2xl font-bold mb-4\u0026#34;\u0026gt;Add New Product\u0026lt;/h1\u0026gt; \u0026lt;input name=\u0026#34;title\u0026#34; value={formData.title} onChange={handleChange} placeholder=\u0026#34;Title\u0026#34; className=\u0026#34;border p-2 w-full mb-4\u0026#34; /\u0026gt; {/* Repeat for other fields */} \u0026lt;button type=\u0026#34;submit\u0026#34; className=\u0026#34;bg-green-500 text-white py-2 px-4 rounded\u0026#34;\u0026gt; Submit \u0026lt;/button\u0026gt; \u0026lt;/form\u0026gt; ); } Edit Product (app/products/[id]/edit/page.js): import { useState, useEffect } from \u0026#39;react\u0026#39;; import { useRouter } from \u0026#39;next/router\u0026#39;; import { useGetProductByIdQuery, useUpdateProductMutation } from \u0026#39;../../store/api\u0026#39;; export default function EditProductPage({ params }) { const { id } = params; const { data, error, isLoading } = useGetProductByIdQuery(id); const [updateProduct] = useUpdateProductMutation(); const [formData, setFormData] = useState({ title: \u0026#39;\u0026#39;, price: \u0026#39;\u0026#39;, description: \u0026#39;\u0026#39;, image: \u0026#39;\u0026#39;, category: \u0026#39;\u0026#39;, }); useEffect(() =\u0026gt; { if (data) { setFormData(data); } }, [data]); const handleChange = (e) =\u0026gt; { setFormData({ ...formData, [e.target.name]: e.target.value }); }; const handleSubmit = async (e) =\u0026gt; { e.preventDefault(); await updateProduct({ id, ...formData }); }; if (isLoading) return \u0026lt;p\u0026gt;Loading...\u0026lt;/p\u0026gt;; if (error) return \u0026lt;p\u0026gt;Error loading product\u0026lt;/p\u0026gt;; return ( \u0026lt;form onSubmit={handleSubmit} className=\u0026#34;container mx-auto p-4\u0026#34;\u0026gt; \u0026lt;h1 className=\u0026#34;text-2xl font-bold mb-4\u0026#34;\u0026gt;Edit Product\u0026lt;/h1\u0026gt; \u0026lt;input name=\u0026#34;title\u0026#34; value={formData.title} onChange={handleChange} placeholder =\u0026#34;Title\u0026#34; className=\u0026#34;border p-2 w-full mb-4\u0026#34; /\u0026gt; {/* Repeat for other fields */} \u0026lt;button type=\u0026#34;submit\u0026#34; className=\u0026#34;bg-blue-500 text-white py-2 px-4 rounded\u0026#34;\u0026gt; Update \u0026lt;/button\u0026gt; \u0026lt;/form\u0026gt; ); } Delete Product (Button in ProductDetailPage): Add a delete button in the product detail page:\nimport { useDeleteProductMutation } from \u0026#39;../../store/api\u0026#39;; export default function ProductDetailPage({ params }) { const { id } = params; const { data, error, isLoading } = useGetProductByIdQuery(id); const [deleteProduct] = useDeleteProductMutation(); const handleDelete = async () =\u0026gt; { await deleteProduct(id); // Redirect or show a success message }; if (isLoading) return \u0026lt;p\u0026gt;Loading...\u0026lt;/p\u0026gt;; if (error) return \u0026lt;p\u0026gt;Error loading product\u0026lt;/p\u0026gt;; return ( \u0026lt;div className=\u0026#34;container mx-auto p-4\u0026#34;\u0026gt; \u0026lt;h1 className=\u0026#34;text-2xl font-bold\u0026#34;\u0026gt;{data?.title}\u0026lt;/h1\u0026gt; \u0026lt;p className=\u0026#34;mt-2\u0026#34;\u0026gt;{data?.description}\u0026lt;/p\u0026gt; \u0026lt;p className=\u0026#34;mt-2 text-lg font-semibold\u0026#34;\u0026gt;${data?.price}\u0026lt;/p\u0026gt; \u0026lt;button onClick={handleDelete} className=\u0026#34;mt-4 bg-red-500 text-white py-2 px-4 rounded\u0026#34; \u0026gt; Delete \u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; ); } 5. Final Touches and Best Practices Reusability: Create reusable components for forms and buttons to avoid code duplication. Error Handling: Implement robust error handling to improve user experience and provide feedback. Optimistic Updates: Consider using optimistic updates for a smoother user experience when performing mutations. Conclusion Integrating Redux Toolkit Query with Next.js using the App Router and combining it with Tailwind CSS provides a powerful and elegant solution for managing server state and building user interfaces. By following this guide, you’ll be able to create a highly efficient and maintainable CRUD application with minimal boilerplate code.\nFeel free to experiment with the provided code and customize it further to suit your needs. Happy coding!\n"},{"section":"Blog","slug":"/blog/post-1/","title":"The Ultimate Guide to Learning HTML, CSS, and JavaScript (ES2015+)","description":"Discover the ultimate guide to mastering HTML, CSS, and JavaScript (ES2015+) with comprehensive tutorials and video resources from FreeCodeCamp. Build a strong foundation in web development with practical projects and expert guidance.","date":"September 1, 2024","image":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/image-placeholder_hu3325241596321067976.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"420\"\n          height=\"236\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/image-placeholder_hu12999451053124933890.png';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n","imageSM":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n  \n\n  \n  \n    \n      \n    \n\n\n    \n    \n\n\n    \n    \n      \n      \n    \n    \n    \n\n\n    \n    \n      \n      \n        \n        \n        \n        \n        \n        \n          \n          \n          \n          \n        \n\n\n        \n        \n\n\n        \u003cimg\n          \n            src=\"/images/image-placeholder_hu2707740879019320827.webp\" loading=\"lazy\" decoding=\"async\"\n          \n\n          alt=\"\"\n          class=\"  img\"\n          width=\"100\"\n          height=\"100\"\n          onerror=\"this.onerror='null';this.src='\\/images\\/image-placeholder_hu11447808651278550042.png';\" /\u003e\n\n        \n      \n      \n    \n    \n  \n\n\n  \n","searchKeyword":"","categories":"JavaScript, Frontend Development, Node.js","tags":"html, css, JavaScript","content":"Whether you\u0026rsquo;re starting your web development journey or looking to refresh your skills, understanding the fundamentals of HTML, CSS, and JavaScript is crucial. This guide will take you through each of these core technologies, with valuable resources from FreeCodeCamp to help you learn effectively.\n1. HTML: The Structure of the Web HTML (HyperText Markup Language) forms the backbone of web pages, providing structure and meaning to your content. Here’s how to get started:\nBasics of HTML Introduction to HTML: Learn the basic syntax and structure of HTML, including elements, tags, and attributes.\nFreeCodeCamp: HTML and HTML5 HTML5 New Elements: Understand the new elements introduced in HTML5, such as \u0026lt;header\u0026gt;, \u0026lt;footer\u0026gt;, and \u0026lt;article\u0026gt;.\nFreeCodeCamp: HTML5 Video Tutorial FreeCodeCamp: HTML Full Course This comprehensive video covers the basics of HTML and HTML5 in detail. 2. CSS: Styling Your Web Pages CSS (Cascading Style Sheets) is used to control the look and feel of a web page. It allows you to apply styles like colors, fonts, and layouts.\nBasics of CSS Introduction to CSS: Learn how to apply styles to HTML elements, including color, typography, and layout.\nFreeCodeCamp: Basic CSS Responsive Design: Understand how to make your web pages responsive and look good on various devices.\nFreeCodeCamp: Responsive Web Design Video Tutorial FreeCodeCamp: CSS Full Course This video provides an in-depth overview of CSS, including advanced styling techniques. 3. JavaScript (ES2015 and Beyond): Making Your Web Pages Interactive JavaScript is a powerful scripting language that enables dynamic content and interactive features on web pages. ES2015 (also known as ES6) and later versions introduced significant improvements to the language.\nJavaScript Basics Introduction to JavaScript: Learn the fundamental concepts of JavaScript, including variables, data types, and operators.\nFreeCodeCamp: Basic JavaScript ES2015 Features: Explore the new features introduced in ES2015, such as arrow functions, classes, and template literals.\nFreeCodeCamp: ES6 Video Tutorial FreeCodeCamp: JavaScript ES6 Full Course This video covers the essential ES6 features and modern JavaScript practices. 4. Combining HTML, CSS, and JavaScript To create a fully functional web page, you need to integrate HTML, CSS, and JavaScript. Practice combining these technologies by building simple projects.\nProject Ideas Build a Personal Portfolio: Create a personal website showcasing your skills and projects. Develop a To-Do List App: Implement a simple task manager using HTML, CSS, and JavaScript. Video Tutorial FreeCodeCamp: Full Web Development Course This comprehensive course covers HTML, CSS, and JavaScript, providing a complete overview of web development. 5. Practice and Projects Hands-on practice is key to mastering these technologies. Use the following resources to apply what you’ve learned:\nFreeCodeCamp: Projects Work on various projects to reinforce your understanding and build your portfolio. Conclusion Mastering HTML, CSS, and JavaScript is essential for any web developer. By following this guide and utilizing the FreeCodeCamp resources, you’ll build a strong foundation and be well on your way to creating stunning and interactive web applications. Happy coding!\n"}]